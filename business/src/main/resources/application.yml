server:
  port: 92

spring:
  application:
    name: demo-admin
  profiles:
    active: dev
  messages:
    basename: i18n/messages
    encoding: UTF-8
  main:
    allow-bean-definition-overriding: true
  mvc:
    throw-exception-if-no-handler-found: true
  servlet:
    multipart:
      max-file-size: 100MB
      max-request-size: 300MB
  jackson:
    date-format: yyyy-MM-dd HH:mm:ss
    default-property-inclusion: always #non_null#non_empty
    time-zone: GMT+8

  datasource:
    driver-class-name: com.mysql.cj.jdbc.Driver
    type: com.zaxxer.hikari.HikariDataSource
    hikari:
      # 池名称
      pool-name: HikariDataSourcePool
      # 自动提交
      auto-commit: true
      # 连接池中允许的最小连接数。缺省值：等于maximum-pool-size
      # 此属性控制 HikariCP 尝试在池中维护的最小空闲连接数。 如果空闲连接低于这个值并且池中的总连接小于 maximumPoolSize，
      # HikariCP 将尽最大努力快速有效地添加额外的连接。 但是，为了获得最大性能和对峰值需求的响应，我们建议不要设置此值 不设置的话idle-timeout不会使用
      minimum-idle: 10
      # 连接池中允许的最大连接数。缺省值：10
      maximum-pool-size: 30
      # 最大闲置时长：一个连接idle状态的最大时长（毫秒），超时则被释放（retired），缺省:10分钟 600000
      # 此属性控制允许连接在池中闲置的最长时间。 此设置仅在 minimumIdle 定义为小于 maximumPoolSize 时适用。
      # 一旦池达到 minimumIdle 连接数，空闲连接将不会被淘汰。 连接是否因空闲而退出取决于最大 30 秒的变化，平均变化 15 秒。 在此超时之前，连接永远不会因空闲而退出。
      # 值为 0 表示永远不会从池中删除空闲连接。
      idle-timeout: 200000
      # 数据库连接测试语句
      connection-test-query: SELECT 1
      # 一个连接的生命时长（毫秒），超时而且没被使用则被释放（retired），缺省:30分钟，建议设置比数据库超时时长少30秒 最少30000ms
      max-lifetime: 300000
      # 此属性控制 HikariCP 尝试保持连接活动的频率，以防止它被数据库或网络基础设施超时。
      # The minimum allowed value is 30000ms (30 seconds), but a value in the range of minutes is most desirable. Default: 0 (disabled)
      keepalive-time: 40000
      # 等待连接池分配连接的最大时长（毫秒），超过这个时长还没可用的连接则发生SQLException；Lowest 250 ms. Default: 30000 (30 seconds)
      connection-timeout: 1000
      # 验证连接有效性的超时时间 默认是5秒，最小不能小于250毫秒
      validation-timeout: 250

  # Flyway 配置
  flyway:
    enabled: true
    # 初始化没有历史记录表就创建
    baseline-on-migrate: true
    baselineVersion: 0

  data:
    redis:
      timeout: 5000
      jedis:
        pool:
          # 连接池中的最小空闲连接
          min-idle: 0
          # 连接池中的最大空闲连接
          max-idle: 8
          # 连接池的最大数据库连接数
          max-active: 8
          # #连接池最大阻塞等待时间（使用负值表示没有限制）
          max-wait: -1ms
          # 空闲对象逐出器线程的运行间隔时间.空闲连接线程释放周期时间.
          time-between-eviction-runs: 3600
#  # 集群模式下的配置
#      cluster:
#        nodes:
#          - 192.168.200.30:16379
#          - 192.168.200.30:16380
#          - 192.168.200.30:16381

  quartz:
    auto-startup: true
    # 启动之后延迟1秒启动定时任务 默认0s
    startup-delay: 1
    scheduler-name: demoScheduler
    # 数据库方式
    job-store-type: jdbc
    # Database schema initialization mode.
    jdbc:
      # 初始化数据库
      initialize-schema: ALWAYS
      schema: classpath:org/quartz/impl/jdbcjobstore/tables_@@platform@@.sql
    # 覆盖已存在的jobs
    overwrite-existing-jobs: true
    # 关闭的时候等待工作执行完成
    wait-for-jobs-to-complete-on-shutdown: false
    # 相关属性配置
    properties:
      org:
        quartz:
          scheduler:
            #            instanceName: clusteredScheduler
            instanceId: AUTO
          threadPool:
            class: org.quartz.simpl.SimpleThreadPool
            threadCount: 10
            threadPriority: 5
            threadsInheritContextClassLoaderOfInitializingThread: true

logging:
  level:
    root: info
    #org.springframework: DEBUG

mybatis-plus:
  global-config:
    db-config:
      #主键类型  0:"数据库ID自增", 1:"用户输入ID",2:"全局唯一ID (数字类型唯一ID)", 3:"全局唯一ID UUID";
      id-type:
      #字段策略 0:"忽略判断",1:"非 NULL 判断"),2:"非空判断"
      insert-strategy: NOT_NULL
      update-strategy: NOT_NULL
  configuration:
    map-underscore-to-camel-case: true
    cache-enabled: false
  mapper-locations: classpath*:**/mapper/*/*Mapper.xml

url:
  #全局都要放开的路径，不过认证,如：获取token,swagger-ui,静态资源
  public-ignores:
    - /*/oauth2/token
    - /oauth2/token
    - /swagger-resources/**
    - /webjars/**
    - /swagger-ui.html/**
    - /doc.html
    - /v3/api-docs/**
    - /favicon.ico
  #指定放开的路径，不过认证，如：用户注册，验证码获取，短信验证码获取，自定义路径
  ignores:
    - /captchaImage
    - /login

# springdoc-openapi项目配置
springdoc:
  swagger-ui:
    path: /swagger-ui.html
    tags-sorter: alpha
    operations-sorter: alpha
  api-docs:
    path: /v3/api-docs
  # 配置分组
  group-configs:
    - group: 'demo'
      paths-to-match: '/**'
      packages-to-exclude: 'com.xlj.system'
      packages-to-scan: com.xlj
    - group: 'system'
      paths-to-match: '/**'
      packages-to-scan: com.xlj.system

# knife4j的增强配置，不需要增强可以不配
knife4j:
  enable: true
  # 开启服务端Cors配置 这里设置true之后会出错
  # When allowCredentials is true, allowedOrigins cannot contain the special value "*" since that cannot be set on the "Access-Control-Allow-Origin" response header. To allow credentials to a set of origins, list them explicitly or consider using "allowedOriginPatterns" instead.
  # https://doc.xiaominfo.com/v2/documentation/host.html
  cors: false
  setting:
    language: zh_cn
    enableOpenApi: false
    swaggerModelName: 实体类列表
    enableSwaggerModels: true
    enableHost: false
#    enableHostText: "http://192.168.200.35/api"

# 认证服务在其他地方时需要
#jwk:
#  set:
#    uri: http://127.0.0.1:${server.port}/oauth2/jwks

oauth2:
  authorization:
    uri: http://127.0.0.1:${server.port}/oauth2/authorize
  token:
    uri: http://127.0.0.1:${server.port}/oauth2/token
    issuer: http://127.0.0.1:${server.port}/
  access:
    token:
      time: "1"
      time.unit: day
  refresh:
    token:
      time: 4
      time.unit: day
